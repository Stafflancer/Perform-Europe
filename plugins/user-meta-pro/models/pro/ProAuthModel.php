<?php
namespace UserMeta;class ProAuthModel{private function getPublicKey(){return "
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC5vAGInE2qk+BIzpySkoK/Y0wf
YRQDuWhMqCvU9Nu2RqPWcMzrJrv+cm2W63P+wrJyiUbIMduOcv7POpCxGJqRNlG5
e//LNI68YKQA8rvzODM9eaQwDk7y5xGYPKxMu1isqGShf7Y5xJsOvXWhgpJwKuyk
f5IDvZ/GZ4NKX1DEpQIDAQAB
-----END PUBLIC KEY-----";}private function encryptRemoteString($gll___________d){$eYY_____________T=openssl_get_publickey($this->getPublicKey());openssl_public_encrypt($gll___________d,$xMM___________9,$eYY_____________T);return base64_encode($xMM___________9);}public function decryptRemoteString($x33_________b){$x33_________b=(strpos($x33_________b,'%')!==false)?urldecode($x33_________b):$x33_________b;$eYY_____________T=openssl_get_publickey($this->getPublicKey());openssl_public_decrypt(base64_decode($x33_________b),$sFF________________L,$eYY_____________T);return $sFF________________L;}private function rpcValidateLicense($uyy_____________Y,$q33____________y,$poo___________T){global $userMeta;return $this->xmlRpcRequest('ump.validateLicense',['email'=>$uyy_____________Y,'password'=>$q33____________y,'site'=>cleanSiteUrl(network_site_url()),'version'=>$userMeta->version,'request_type'=>$poo___________T,'is_multisite'=>is_multisite()]);}private function rpcUserUtils($poo___________T){global $userMeta;$err____________________u=$userMeta->getData('pro_auth',true);if(empty($err____________________u['hash']))throw new \Exception('Empty auth hash');$ngg__________________z=['hash'=>($err____________________u['hash']),'version'=>$userMeta->version,'request_type'=>$poo___________T];return $this->xmlRpcRequest('ump.userUtils',$ngg__________________z);}private function rpcPublicUtils($lVV_____________R){return $this->xmlRpcRequest('ump.publicUtils',['action'=>$lVV_____________R]);}private function xmlRpcRequest($lEE_______________d,array$ngg__________________z){global $userMeta;include_once(ABSPATH.WPINC.'/class-IXR.php');include_once(ABSPATH.WPINC.'/class-wp-http-ixr-client.php');$omm_________2=new \WP_HTTP_IXR_Client($userMeta->website.':443/xmlrpc.php');$omm_________2->query($lEE_______________d,$ngg__________________z);if($omm_________2->isError()){$mCC___________Z='Something went wrong'.' - '.$omm_________2->getErrorCode().' : '.$omm_________2->getErrorMessage().'. Click <a href="https://user-meta.com/activation/">here</a> for alternative method.';throw new \Exception($mCC___________Z);}else{$ppp____________________y=$omm_________2->getResponse();if(is_array($ppp____________________y)){if(empty($ppp____________________y))throw new \Exception('Empty response form server!');return $ppp____________________y;}throw new \Exception($ppp____________________y);}}public function isLicenceValidated(){global $userMeta;try{$err____________________u=$userMeta->getData('pro_auth',true);if(!empty($err____________________u['email'])&&!empty($err____________________u['hash'])){$x33_________b=$this->decryptRemoteString($err____________________u['hash']);$uyy_____________Y=explode('||',$x33_________b)[0];$hYY_____i=explode('||',$x33_________b)[1];if((trim($uyy_____________Y)==trim($err____________________u['email']))and(cleanSiteUrl(network_site_url())==cleanSiteUrl($hYY_____i)))return true;}}catch(\Exception$i99_____Q){}return false;}private function updateProAuth($uyy_____________Y,$x33_________b,$wpp_____E='single'){global $userMeta;$err____________________u=['email'=>$uyy_____________Y,'hash'=>$x33_________b,'level'=>$wpp_____E,'version'=>$userMeta->version,'last_checked'=>time()];return $userMeta->updateData('pro_auth',$err____________________u,true);}public function updateProAccountSettings($ngg___________v){global $userMeta;if(empty($ngg___________v['account_email'])||empty($ngg___________v['account_pass']))return false;$uyy_____________Y=$ngg___________v['account_email'];$poo___________T=$userMeta->isPro()?'cred_update':'activate';try{$xll___________________N=$this->rpcValidateLicense($uyy_____________Y,base64_encode($ngg___________v['account_pass']),$poo___________T);}catch(\Exception$i99_____Q){return $userMeta->printAjaxOutput($userMeta->showError($i99_____Q->getMessage()));}if(isset($xll___________________N['status'])&&$xll___________________N['status']=='validated'){self::updateProAuth($uyy_____________Y,$xll___________________N['hash'],$xll___________________N['level']);if($poo___________T=='activate'){echo $userMeta->showMessage('License successfully validated');if(!$userMeta->isPro){$hDD_______________x='Redirecting for upgrading to Pro version... ';$hDD_______________x.="<br />".'if not redirecting,'." <a href='".$userMeta->pluginUpdateUrl()."'>".'click here for upgrading to Pro version'."</a>";echo $userMeta->showMessage($hDD_______________x);echo $userMeta->jsRedirect($userMeta->pluginUpdateUrl());}else{echo $userMeta->jsRedirect($userMeta->adminPageUrl('settings',false));}}else{echo $userMeta->showMessage('Credentials updated');}}else{echo $userMeta->showError('Something went wrong!');}}private function generatePluginDownloadUrl($oJJ_________________p){global $userMeta;try{if(!$this->isLicenceValidated())return false;$err____________________u=$userMeta->getData('pro_auth',true);$yLL_____r=$this->encryptRemoteString($oJJ_________________p.'||'.time());$ngg___________v=['action'=>'ums-remote-download','email'=>$err____________________u['email'],'key'=>$yLL_____r,'hash'=>$err____________________u['hash'],'version'=>$userMeta->version];return $userMeta->website."/wp-admin/admin-ajax.php?".http_build_query($ngg___________v);}catch(\Exception$i99_____Q){}}public function withdrawLicense(){global $userMeta;$err____________________u=$userMeta->getData('pro_auth',true);if(empty($err____________________u['hash']))throw new \Exception('Please validate your license again before withdraw the pro license');$ppp____________________y=$this->rpcUserUtils('license_withdrawn');if(!empty($ppp____________________y['ok'])){return $userMeta->updateData('pro_auth',null,true);}return false;}public function notifyVersionUpdate(){try{return $this->rpcUserUtils('version_update');}catch(\Exception$i99_____Q){return $i99_____Q->getMessage();}}public function remoteValidationPro(array$h88________z){global $userMeta;try{if(empty($h88________z['username'])||empty($h88________z['password'])||empty($h88________z['data']))throw new \Exception("Parameter error");$fLL__________t=$h88________z['username'];$q33____________y=$h88________z['password'];$ngg___________v=$h88________z['data'];$this->validateAdminAccess($fLL__________t,$q33____________y);$wpp_____E=$this->validateEncryptedData($ngg___________v['encrypted'],$ngg___________v['hash'],$ngg___________v['email']);$hpp__________P=$userMeta->isPro()?true:false;if($ngg___________v['action']=='validated'){self::updateProAuth($ngg___________v['email'],$ngg___________v['hash'],$wpp_____E);if(!$this->isLicenceValidated())throw new \Exception('Something went wrong - license not validated');$mCC___________Z=$hpp__________P?'Pro version already validated. Credentials updated!':'License successfully validated';return[$mCC___________Z];}elseif($ngg___________v['action']=='license_withdrawn'){if(!$userMeta->isPro()){return['No license found to withdraw'];}else{if($userMeta->updateData('pro_auth',null,true))return['License has been withdrawn'];}}}catch(\Throwable$aEE____________________F){return 'From plugin: '.$aEE____________________F->getMessage();}catch(\Exception$i99_____Q){return 'From plugin: '.$i99_____Q->getMessage();}}private function validateAdminAccess($fLL__________t,$q33____________y){$eII__________8=get_user_by('login',$fLL__________t);if($eII__________8===false)throw new \Exception("Username: $fLL__________t is not exists");$eII__________8=wp_authenticate($fLL__________t,$q33____________y);if(is_wp_error($eII__________8))throw new \Exception($eII__________8->get_error_message());if(!is_super_admin($eII__________8->ID)){if(is_multisite()){throw new \Exception("Username: $fLL__________t is not a super admin account for network");}else{throw new \Exception("Username: $fLL__________t is not an admin account");}}}public function validateProByUrl(){global $userMeta;if(!(isset($_GET['ump_license_validation'])||(isset($_GET['action'])&&$_GET['action']=='ump_license_validation')))return;try{if(!$userMeta->isAdmin())throw new \Exception('Please login with an admin account.');$uyy_____________Y=filter_input(INPUT_GET,'email',FILTER_VALIDATE_EMAIL);$ngg___________v=filter_input(INPUT_GET,'key');$x33_________b=filter_input(INPUT_GET,'hash');if(empty($uyy_____________Y)||empty($ngg___________v)||empty($x33_________b))throw new \Exception('Invalid Arguments.');$wpp_____E=$this->validateEncryptedData($ngg___________v,$x33_________b,$uyy_____________Y);self::updateProAuth($uyy_____________Y,$x33_________b,$wpp_____E);if($userMeta->isPro()){echo "<h3>Validation Successfull!</h3>";}else{echo "<h3>Something went wrong while validating!</h3>";}}catch(\Exception$i99_____Q){echo '<h3>'.$i99_____Q->getMessage().'</h3>';}die();}private function validateEncryptedData($nZZ_____K,$x33_________b,$uyy_____________Y){$ngg___________v=$this->decryptRemoteString($nZZ_____K);if(empty($ngg___________v))throw new \Exception('Invalid license key.');$ngg___________v=explode('||',$ngg___________v);$wpp_____E=$ngg___________v[0];$gff_________________L=$ngg___________v[1];$x33_________b=$this->decryptRemoteString($x33_________b);if(empty($x33_________b))throw new \Exception('Invalid hash.');$x33_________b=explode('||',$x33_________b);$jMM__________u=$x33_________b[0];$pFF____________5=$x33_________b[1];if(cleanSiteUrl($pFF____________5)!=cleanSiteUrl(network_site_url()))throw new \Exception('Invalid site.');if(!validateTimeStamp($gff_________________L,3600*24*3))throw new \Exception('License key expired! Please generate license key again.');if($uyy_____________Y!=$jMM__________u)throw new \Exception('Email missmatch.');return $wpp_____E;}public function activateLicenseNotice(){global $userMeta;if($userMeta->isPro){if(!$userMeta->isPro()){echo $userMeta->showError(sprintf(__('Please enter your license information to <a href="%s">activate User Meta Pro</a>.',$userMeta->name),admin_url("admin.php?page=user-meta-settings#um_activation_form")));}}}public function checkForUpdate($z66__________________t){global $userMeta;if(empty($z66__________________t->checked))return $z66__________________t;try{$pKK____________U=$this->rpcPublicUtils('latest_stable_version')['user-meta-pro'];}catch(\Exception$i99_____Q){return $z66__________________t;}if(version_compare($userMeta->version,$pKK____________U,'<')){$sUU_______G=explode('/',$userMeta->pluginSlug);$pcc________N=new \stdClass();$pcc________N->slug=str_replace('.php','',$sUU_______G[1]);$pcc________N->plugin=$userMeta->pluginSlug;$pcc________N->new_version=$pKK____________U;$pcc________N->url=$userMeta->website;$pcc________N->package=$this->generatePluginDownloadUrl('user-meta-pro');$z66__________________t->response[$userMeta->pluginSlug]=$pcc________N;}else{unset($z66__________________t->response[$userMeta->pluginSlug]);}return $z66__________________t;}public function loadProControllers($jWW____________________A,$xff_________________x){global $userMeta;if($userMeta->isPro()){$q11____________X=$xff_________________x.'pro/';if(file_exists($q11____________X)){foreach(scandir($q11____________X)as $pNN__________________R){if(preg_match("/.php$/i",$pNN__________________R)){$jWW____________________A[str_replace(".php","",$pNN__________________R)]=$q11____________X.$pNN__________________R;}}}}return $jWW____________________A;}public function locateProView($lVV________X){global $userMeta;if($userMeta->isPro()){foreach($userMeta->extensions as $eaa_________________V=>$ijj______________t){$lVV________X[]=$ijj______________t.'/views/pro/';}$lVV________X[]=$userMeta->viewsPath.'pro/';}return $lVV________X;}public function proLoaded(){add_action('init',function(){do_action('user_meta_pro_loaded');});}public function upgradeTo_1_1_5(){global $userMeta;if(is_multisite()){$ngg___________v=$userMeta->getData('pro_auth',true);if(empty($ngg___________v)){$ngg___________v=get_option('user_meta_pro_auth');if(!empty($ngg___________v)){$userMeta->updateData('pro_auth',$ngg___________v,true);}}}}private function getTempAuthHash($uyy_____________Y,$lgg____________________5){global $userMeta;return $this->xmlRpcRequest('ump.publicUtils',['action'=>'temp_auth_hash','email'=>$uyy_____________Y,'site'=>cleanSiteUrl(network_site_url()),'previous_version'=>$lgg____________________5,'current_version'=>$userMeta->version]);}public function upgradeTo_1_3($lgg____________________5){global $userMeta;$ngg___________v=$userMeta->getData('pro_auth',true);if(!empty($ngg___________v['email'])&&!empty($ngg___________v['key'])){try{$wpp_____E=isset($ngg___________v['level'])?$ngg___________v['level']:null;$x33_________b=$this->getTempAuthHash($ngg___________v['email'],$lgg____________________5)[0];$this->updateProAuth($ngg___________v['email'],$x33_________b,$wpp_____E);}catch(\Exception$i99_____Q){}}}}